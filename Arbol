class Nodo:
    def __init__(self, valor):
        self.valor = valor
        self.izquierda = None
        self.derecha = None

class Arbol:
    def __init__(self):
        self.raiz = None

    def agregar(self, valor):
        if self.raiz is None:
            self.raiz = Nodo(valor)
        else:
            self._agregar_recursivo(self.raiz, valor)

    def _agregar_recursivo(self, nodo, valor):
        if valor < nodo.valor:
            if nodo.izquierda is None:
                nodo.izquierda = Nodo(valor)
            else:
                self._agregar_recursivo(nodo.izquierda, valor)
        else:
            if nodo.derecha is None:
                nodo.derecha = Nodo(valor)
            else:
                self._agregar_recursivo(nodo.derecha, valor)

    def buscar(self, valor):
        return self._buscar_recursivo(self.raiz, valor)

    def _buscar_recursivo(self, nodo, valor):
        if nodo is None or nodo.valor == valor:
            return nodo
        elif valor < nodo.valor:
            return self._buscar_recursivo(nodo.izquierda, valor)
        else:
            return self._buscar_recursivo(nodo.derecha, valor)

    def eliminar(self, valor):
        self.raiz = self._eliminar_recursivo(self.raiz, valor)

    def _eliminar_recursivo(self, nodo, valor):
        if nodo is None:
            return nodo
        if valor < nodo.valor:
            nodo.izquierda = self._eliminar_recursivo(nodo.izquierda, valor)
        elif valor > nodo.valor:
            nodo.derecha = self._eliminar_recursivo(nodo.derecha, valor)
        else:
            if nodo.izquierda is None:
                return nodo.derecha
            elif nodo.derecha is None:
                return nodo.izquierda

            nodo.valor = self._minimo_valor(nodo.derecha)
            nodo.derecha = self._eliminar_recursivo(nodo.derecha, nodo.valor)

        return nodo

    def _minimo_valor(self, nodo):
        actual = nodo
        while actual.izquierda is not None:
            actual = actual.izquierda
        return actual.valor

    def imprimir(self):
        self._imprimir_estructurado(self.raiz, 0)

    def _imprimir_estructurado(self, nodo, nivel):
        if nodo is not None:
            self._imprimir_estructurado(nodo.derecha, nivel + 1)
            print("    " * nivel + f"--> {nodo.valor}")
            self._imprimir_estructurado(nodo.izquierda, nivel + 1)

if __name__ == "__main__":
    arbol = Arbol()
    while True:
        print("\nOpciones:")
        print("1. Agregar un valor al árbol")
        print("2. Eliminar un valor del árbol")
        print("3. Imprimir el árbol estructurado")
        print("4. Salir")
        
        opcion = input("Selecciona una opción: ")
        
        if opcion == '1':
            valor = int(input("Ingrese el valor a agregar: "))
            arbol.agregar(valor)
        elif opcion == '2':
            valor = int(input("Ingrese el valor a eliminar: "))
            arbol.eliminar(valor)
        elif opcion == '3':
            print("Árbol estructurado:")
            arbol.imprimir()
            print()
        elif opcion == '4':
            print("Saliendo del programa.")
            break
        else:
            print("Opción no válida. Intente de nuevo.")
